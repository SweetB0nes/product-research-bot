import os
import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

from rag_engine import generate_response

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
bot = Bot(TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

def split_message(text: str, max_len: int = 4000) -> list:
    """–°–ø–ª–∏—Ç –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–µ"""
    parts = []
    while len(text) > max_len:
        split_index = text.rfind('\n', 0, max_len)
        if split_index == -1:
            split_index = max_len
        parts.append(text[:split_index])
        text = text[split_index:].lstrip()
    parts.append(text)
    return parts

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """ /start """
    welcome_msg = (
        "üîç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã, –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É—é —Å—Ä–µ–¥—É.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        "‚Ä¢ –ö–∞–∫–∏–µ –±–æ–ª–∏ –≤ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ –≤—ã—è–≤–ª–µ–Ω—ã –≤ 2025 –≥–æ–¥—É?\n"
        "‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç–µ UX-—Ç—Ä–µ–Ω–¥—ã 2024 –∏ 2025 –≥–æ–¥–æ–≤\n"
        "‚Ä¢ –ö–∞–∫–∏–µ –º–µ—Ç–æ–¥–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–≥–æ —Ä–æ—Å—Ç–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã –≤ 2025?\n\n"
        "–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π!"
    )
    await message.answer(welcome_msg)

@dp.message()
async def handle_query(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        user_id = message.from_user.id
        query = message.text
        
        logger.info(f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {user_id}: {query}")
        
        await message.bot.send_chat_action(
            chat_id=message.chat.id, 
            action="typing"
        )
        
        result = await asyncio.to_thread(generate_response, query)
        
        if not result or not result[0].strip():
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
            return
            
        answer, sources = result
        
        response_text = f"{answer}\n\nüîç –ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n" + "\n".join(sources)
        
        if len(response_text) > 4000:
            message_parts = split_message(response_text)
            for part in message_parts:
                await message.answer(part)
        else:
            await message.answer(response_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        await message.answer("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())